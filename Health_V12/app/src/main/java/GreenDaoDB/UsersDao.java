package GreenDaoDB;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zj.health.health_v1.Model.Users;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USERS".
*/
public class UsersDao extends AbstractDao<Users, Long> {

    public static final String TABLENAME = "USERS";

    /**
     * Properties of entity Users.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Phone = new Property(1, String.class, "phone", false, "PHONE");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property Birth = new Property(3, String.class, "birth", false, "BIRTH");
        public final static Property Region = new Property(4, String.class, "region", false, "REGION");
        public final static Property IconUrl = new Property(5, String.class, "iconUrl", false, "ICON_URL");
        public final static Property IsDoctor = new Property(6, boolean.class, "isDoctor", false, "IS_DOCTOR");
        public final static Property Platform = new Property(7, String.class, "platform", false, "PLATFORM");
        public final static Property Sex = new Property(8, int.class, "sex", false, "SEX");
        public final static Property Height = new Property(9, int.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(10, int.class, "weight", false, "WEIGHT");
        public final static Property LiveMode = new Property(11, int.class, "liveMode", false, "LIVE_MODE");
        public final static Property SportMode = new Property(12, int.class, "sportMode", false, "SPORT_MODE");
        public final static Property ReferralCode = new Property(13, String.class, "referralCode", false, "REFERRAL_CODE");
        public final static Property ReferrerCode = new Property(14, String.class, "referrerCode", false, "REFERRER_CODE");
        public final static Property Sig = new Property(15, String.class, "sig", false, "SIG");
        public final static Property Id = new Property(16, String.class, "id", false, "ID");
        public final static Property DoctorStatus = new Property(17, String.class, "doctorStatus", false, "DOCTOR_STATUS");
        public final static Property Token = new Property(18, String.class, "token", false, "TOKEN");
        public final static Property Registered = new Property(19, boolean.class, "registered", false, "REGISTERED");
    }


    public UsersDao(DaoConfig config) {
        super(config);
    }
    
    public UsersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USERS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"PHONE\" TEXT," + // 1: phone
                "\"NICKNAME\" TEXT," + // 2: nickname
                "\"BIRTH\" TEXT," + // 3: birth
                "\"REGION\" TEXT," + // 4: region
                "\"ICON_URL\" TEXT," + // 5: iconUrl
                "\"IS_DOCTOR\" INTEGER NOT NULL ," + // 6: isDoctor
                "\"PLATFORM\" TEXT," + // 7: platform
                "\"SEX\" INTEGER NOT NULL ," + // 8: sex
                "\"HEIGHT\" INTEGER NOT NULL ," + // 9: height
                "\"WEIGHT\" INTEGER NOT NULL ," + // 10: weight
                "\"LIVE_MODE\" INTEGER NOT NULL ," + // 11: liveMode
                "\"SPORT_MODE\" INTEGER NOT NULL ," + // 12: sportMode
                "\"REFERRAL_CODE\" TEXT," + // 13: referralCode
                "\"REFERRER_CODE\" TEXT," + // 14: referrerCode
                "\"SIG\" TEXT," + // 15: sig
                "\"ID\" TEXT," + // 16: id
                "\"DOCTOR_STATUS\" TEXT," + // 17: doctorStatus
                "\"TOKEN\" TEXT," + // 18: token
                "\"REGISTERED\" INTEGER NOT NULL );"); // 19: registered
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USERS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Users entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(4, birth);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(5, region);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(6, iconUrl);
        }
        stmt.bindLong(7, entity.getIsDoctor() ? 1L: 0L);
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(8, platform);
        }
        stmt.bindLong(9, entity.getSex());
        stmt.bindLong(10, entity.getHeight());
        stmt.bindLong(11, entity.getWeight());
        stmt.bindLong(12, entity.getLiveMode());
        stmt.bindLong(13, entity.getSportMode());
 
        String referralCode = entity.getReferralCode();
        if (referralCode != null) {
            stmt.bindString(14, referralCode);
        }
 
        String referrerCode = entity.getReferrerCode();
        if (referrerCode != null) {
            stmt.bindString(15, referrerCode);
        }
 
        String sig = entity.getSig();
        if (sig != null) {
            stmt.bindString(16, sig);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(17, id);
        }
 
        String doctorStatus = entity.getDoctorStatus();
        if (doctorStatus != null) {
            stmt.bindString(18, doctorStatus);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(19, token);
        }
        stmt.bindLong(20, entity.getRegistered() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Users entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(4, birth);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(5, region);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(6, iconUrl);
        }
        stmt.bindLong(7, entity.getIsDoctor() ? 1L: 0L);
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(8, platform);
        }
        stmt.bindLong(9, entity.getSex());
        stmt.bindLong(10, entity.getHeight());
        stmt.bindLong(11, entity.getWeight());
        stmt.bindLong(12, entity.getLiveMode());
        stmt.bindLong(13, entity.getSportMode());
 
        String referralCode = entity.getReferralCode();
        if (referralCode != null) {
            stmt.bindString(14, referralCode);
        }
 
        String referrerCode = entity.getReferrerCode();
        if (referrerCode != null) {
            stmt.bindString(15, referrerCode);
        }
 
        String sig = entity.getSig();
        if (sig != null) {
            stmt.bindString(16, sig);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(17, id);
        }
 
        String doctorStatus = entity.getDoctorStatus();
        if (doctorStatus != null) {
            stmt.bindString(18, doctorStatus);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(19, token);
        }
        stmt.bindLong(20, entity.getRegistered() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Users readEntity(Cursor cursor, int offset) {
        Users entity = new Users( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // birth
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // region
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // iconUrl
            cursor.getShort(offset + 6) != 0, // isDoctor
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // platform
            cursor.getInt(offset + 8), // sex
            cursor.getInt(offset + 9), // height
            cursor.getInt(offset + 10), // weight
            cursor.getInt(offset + 11), // liveMode
            cursor.getInt(offset + 12), // sportMode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // referralCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // referrerCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // sig
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // id
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // doctorStatus
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // token
            cursor.getShort(offset + 19) != 0 // registered
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Users entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBirth(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRegion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIconUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsDoctor(cursor.getShort(offset + 6) != 0);
        entity.setPlatform(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSex(cursor.getInt(offset + 8));
        entity.setHeight(cursor.getInt(offset + 9));
        entity.setWeight(cursor.getInt(offset + 10));
        entity.setLiveMode(cursor.getInt(offset + 11));
        entity.setSportMode(cursor.getInt(offset + 12));
        entity.setReferralCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setReferrerCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSig(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDoctorStatus(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setToken(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setRegistered(cursor.getShort(offset + 19) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Users entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Users entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Users entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
