package GreenDaoDB;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zj.health.health_v1.Model.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ShareCode = new Property(0, String.class, "shareCode", false, "SHARE_CODE");
        public final static Property Country = new Property(1, String.class, "country", false, "COUNTRY");
        public final static Property AddTime = new Property(2, String.class, "addTime", false, "ADD_TIME");
        public final static Property City = new Property(3, String.class, "city", false, "CITY");
        public final static Property OpenId = new Property(4, String.class, "openId", false, "OPEN_ID");
        public final static Property SonCount = new Property(5, String.class, "sonCount", false, "SON_COUNT");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
        public final static Property Language = new Property(7, String.class, "language", false, "LANGUAGE");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property Platform = new Property(9, String.class, "platform", false, "PLATFORM");
        public final static Property Password = new Property(10, String.class, "password", false, "PASSWORD");
        public final static Property LiveMode = new Property(11, String.class, "liveMode", false, "LIVE_MODE");
        public final static Property SportMode = new Property(12, String.class, "sportMode", false, "SPORT_MODE");
        public final static Property LoginTime = new Property(13, String.class, "loginTime", false, "LOGIN_TIME");
        public final static Property Weibo = new Property(14, String.class, "weibo", false, "WEIBO");
        public final static Property Province = new Property(15, String.class, "province", false, "PROVINCE");
        public final static Property Nickname = new Property(16, String.class, "nickname", false, "NICKNAME");
        public final static Property Logo = new Property(17, String.class, "logo", false, "LOGO");
        public final static Property Id = new Property(18, long.class, "id", true, "_id");
        public final static Property GrandeSonCount = new Property(19, String.class, "grandeSonCount", false, "GRANDE_SON_COUNT");
        public final static Property Height = new Property(20, String.class, "height", false, "HEIGHT");
        public final static Property Qq = new Property(21, String.class, "qq", false, "QQ");
        public final static Property Sex = new Property(22, String.class, "sex", false, "SEX");
        public final static Property Mobile = new Property(23, String.class, "mobile", false, "MOBILE");
        public final static Property Wechat = new Property(24, String.class, "wechat", false, "WECHAT");
        public final static Property Birth = new Property(25, String.class, "birth", false, "BIRTH");
        public final static Property Weight = new Property(26, String.class, "weight", false, "WEIGHT");
        public final static Property Relatives = new Property(27, String.class, "relatives", false, "RELATIVES");
        public final static Property ParentId = new Property(28, String.class, "parentId", false, "PARENT_ID");
        public final static Property Appid = new Property(29, String.class, "appid", false, "APPID");
        public final static Property Name = new Property(30, String.class, "name", false, "NAME");
        public final static Property Account = new Property(31, String.class, "account", false, "ACCOUNT");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"SHARE_CODE\" TEXT," + // 0: shareCode
                "\"COUNTRY\" TEXT," + // 1: country
                "\"ADD_TIME\" TEXT," + // 2: addTime
                "\"CITY\" TEXT," + // 3: city
                "\"OPEN_ID\" TEXT," + // 4: openId
                "\"SON_COUNT\" TEXT," + // 5: sonCount
                "\"REMARK\" TEXT," + // 6: remark
                "\"LANGUAGE\" TEXT," + // 7: language
                "\"TYPE\" TEXT," + // 8: type
                "\"PLATFORM\" TEXT," + // 9: platform
                "\"PASSWORD\" TEXT," + // 10: password
                "\"LIVE_MODE\" TEXT," + // 11: liveMode
                "\"SPORT_MODE\" TEXT," + // 12: sportMode
                "\"LOGIN_TIME\" TEXT," + // 13: loginTime
                "\"WEIBO\" TEXT," + // 14: weibo
                "\"PROVINCE\" TEXT," + // 15: province
                "\"NICKNAME\" TEXT," + // 16: nickname
                "\"LOGO\" TEXT," + // 17: logo
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 18: id
                "\"GRANDE_SON_COUNT\" TEXT," + // 19: grandeSonCount
                "\"HEIGHT\" TEXT," + // 20: height
                "\"QQ\" TEXT," + // 21: qq
                "\"SEX\" TEXT," + // 22: sex
                "\"MOBILE\" TEXT," + // 23: mobile
                "\"WECHAT\" TEXT," + // 24: wechat
                "\"BIRTH\" TEXT," + // 25: birth
                "\"WEIGHT\" TEXT," + // 26: weight
                "\"RELATIVES\" TEXT," + // 27: relatives
                "\"PARENT_ID\" TEXT," + // 28: parentId
                "\"APPID\" TEXT," + // 29: appid
                "\"NAME\" TEXT," + // 30: name
                "\"ACCOUNT\" TEXT);"); // 31: account
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String shareCode = entity.getShareCode();
        if (shareCode != null) {
            stmt.bindString(1, shareCode);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(2, country);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(3, addTime);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String openId = entity.getOpenId();
        if (openId != null) {
            stmt.bindString(5, openId);
        }
 
        String sonCount = entity.getSonCount();
        if (sonCount != null) {
            stmt.bindString(6, sonCount);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(8, language);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(10, platform);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(11, password);
        }
 
        String liveMode = entity.getLiveMode();
        if (liveMode != null) {
            stmt.bindString(12, liveMode);
        }
 
        String sportMode = entity.getSportMode();
        if (sportMode != null) {
            stmt.bindString(13, sportMode);
        }
 
        String loginTime = entity.getLoginTime();
        if (loginTime != null) {
            stmt.bindString(14, loginTime);
        }
 
        String weibo = entity.getWeibo();
        if (weibo != null) {
            stmt.bindString(15, weibo);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(16, province);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(17, nickname);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(18, logo);
        }
        stmt.bindLong(19, entity.getId());
 
        String grandeSonCount = entity.getGrandeSonCount();
        if (grandeSonCount != null) {
            stmt.bindString(20, grandeSonCount);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(21, height);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(22, qq);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(23, sex);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(24, mobile);
        }
 
        String wechat = entity.getWechat();
        if (wechat != null) {
            stmt.bindString(25, wechat);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(26, birth);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(27, weight);
        }
 
        String relatives = entity.getRelatives();
        if (relatives != null) {
            stmt.bindString(28, relatives);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(29, parentId);
        }
 
        String appid = entity.getAppid();
        if (appid != null) {
            stmt.bindString(30, appid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(31, name);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(32, account);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String shareCode = entity.getShareCode();
        if (shareCode != null) {
            stmt.bindString(1, shareCode);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(2, country);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(3, addTime);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String openId = entity.getOpenId();
        if (openId != null) {
            stmt.bindString(5, openId);
        }
 
        String sonCount = entity.getSonCount();
        if (sonCount != null) {
            stmt.bindString(6, sonCount);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(8, language);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(10, platform);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(11, password);
        }
 
        String liveMode = entity.getLiveMode();
        if (liveMode != null) {
            stmt.bindString(12, liveMode);
        }
 
        String sportMode = entity.getSportMode();
        if (sportMode != null) {
            stmt.bindString(13, sportMode);
        }
 
        String loginTime = entity.getLoginTime();
        if (loginTime != null) {
            stmt.bindString(14, loginTime);
        }
 
        String weibo = entity.getWeibo();
        if (weibo != null) {
            stmt.bindString(15, weibo);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(16, province);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(17, nickname);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(18, logo);
        }
        stmt.bindLong(19, entity.getId());
 
        String grandeSonCount = entity.getGrandeSonCount();
        if (grandeSonCount != null) {
            stmt.bindString(20, grandeSonCount);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(21, height);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(22, qq);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(23, sex);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(24, mobile);
        }
 
        String wechat = entity.getWechat();
        if (wechat != null) {
            stmt.bindString(25, wechat);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(26, birth);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(27, weight);
        }
 
        String relatives = entity.getRelatives();
        if (relatives != null) {
            stmt.bindString(28, relatives);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(29, parentId);
        }
 
        String appid = entity.getAppid();
        if (appid != null) {
            stmt.bindString(30, appid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(31, name);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(32, account);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 18);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // shareCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // country
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // addTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // openId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sonCount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // language
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // platform
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // password
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // liveMode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // sportMode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // loginTime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // weibo
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // province
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // nickname
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // logo
            cursor.getLong(offset + 18), // id
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // grandeSonCount
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // height
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // qq
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // sex
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // mobile
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // wechat
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // birth
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // weight
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // relatives
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // parentId
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // appid
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // name
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31) // account
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setShareCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCountry(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOpenId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSonCount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLanguage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPlatform(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPassword(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLiveMode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSportMode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLoginTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWeibo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setProvince(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setNickname(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLogo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setId(cursor.getLong(offset + 18));
        entity.setGrandeSonCount(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setHeight(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setQq(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSex(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setMobile(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setWechat(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setBirth(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setWeight(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setRelatives(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setParentId(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setAppid(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setName(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setAccount(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
