package GreenDaoDB;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zj.health.health_v1.Model.ReportModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REPORT_MODEL".
*/
public class ReportModelDao extends AbstractDao<ReportModel, String> {

    public static final String TABLENAME = "REPORT_MODEL";

    /**
     * Properties of entity ReportModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Images = new Property(2, String.class, "images", false, "IMAGES");
        public final static Property Flag = new Property(3, String.class, "flag", false, "FLAG");
        public final static Property AddTime = new Property(4, String.class, "addTime", false, "ADD_TIME");
        public final static Property Logo = new Property(5, String.class, "logo", false, "LOGO");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property CheckItems = new Property(7, String.class, "checkItems", false, "CHECK_ITEMS");
        public final static Property CheckItemId = new Property(8, String.class, "checkItemId", false, "CHECK_ITEM_ID");
        public final static Property Title = new Property(9, String.class, "title", false, "TITLE");
        public final static Property UserId = new Property(10, String.class, "userId", false, "USER_ID");
        public final static Property Mark = new Property(11, String.class, "mark", false, "MARK");
    }


    public ReportModelDao(DaoConfig config) {
        super(config);
    }
    
    public ReportModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REPORT_MODEL\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"IMAGES\" TEXT," + // 2: images
                "\"FLAG\" TEXT," + // 3: flag
                "\"ADD_TIME\" TEXT," + // 4: addTime
                "\"LOGO\" TEXT," + // 5: logo
                "\"TYPE\" TEXT," + // 6: type
                "\"CHECK_ITEMS\" TEXT," + // 7: checkItems
                "\"CHECK_ITEM_ID\" TEXT," + // 8: checkItemId
                "\"TITLE\" TEXT," + // 9: title
                "\"USER_ID\" TEXT," + // 10: userId
                "\"MARK\" TEXT);"); // 11: mark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REPORT_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReportModel entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(3, images);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(4, flag);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(5, addTime);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(6, logo);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String checkItems = entity.getCheckItems();
        if (checkItems != null) {
            stmt.bindString(8, checkItems);
        }
 
        String checkItemId = entity.getCheckItemId();
        if (checkItemId != null) {
            stmt.bindString(9, checkItemId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(11, userId);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(12, mark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReportModel entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(3, images);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(4, flag);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(5, addTime);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(6, logo);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String checkItems = entity.getCheckItems();
        if (checkItems != null) {
            stmt.bindString(8, checkItems);
        }
 
        String checkItemId = entity.getCheckItemId();
        if (checkItemId != null) {
            stmt.bindString(9, checkItemId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(11, userId);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(12, mark);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ReportModel readEntity(Cursor cursor, int offset) {
        ReportModel entity = new ReportModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // images
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // flag
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // addTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // logo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // checkItems
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // checkItemId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // title
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // mark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReportModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImages(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFlag(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLogo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCheckItems(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCheckItemId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMark(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ReportModel entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ReportModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReportModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
